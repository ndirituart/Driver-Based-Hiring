from datetime import datetime

def hourbased():
    # Getting client inputs
    number_of_employees = int(input("How many employees are available to work on this project?: "))
    individual_work_hours = int(input("How many hours does each employee work per day?: "))
    target_work_hours = int(input("How many hours do you want the work pushe dper day?: "))
    # Loop for days input with constraint
    while True:
        try:
            individual_work_days = int(input("How many days of the week are employees working? (1-7): "))
            if 1 <= individual_work_days <= 7:
                break  # Valid input, exit the loop
            else:
                print("Error: Please enter an integer between 1 and 7.")
        except ValueError:
            print("Error: Please enter a valid integer.")

    # Get and parse the input dates
    def get_date(prompt):
        while True:
            date_str = input(prompt)
            try:
                return datetime.strptime(date_str.strip(), "%d/%m/%y")
            except ValueError:
                print("Invalid date format. Please enter the date in DD/MM/YY format.")

    today = datetime.now().date()

    while True:
        start_day = get_date("When does your project start? (DD/MM/YY): ").date()
        if start_day <= today:
            print("The start date must be after today. Please enter a valid start date.")
        else:
            break

    end_day = get_date("When is your project due? (DD/MM/YY): ").date()
    difference_in_days = (end_day - start_day).days

    if difference_in_days < 0:
        print("The end date must be after the start date.")
        return

    # Calculate total work hours needed
    total_work_hours_needed = difference_in_days * target_work_hours
    # Calculate the total available work hours
    total_available_hours = individual_work_hours * individual_work_days 
    # Calculating the number of employees needed
    if total_available_hours >= total_work_hours_needed:
        print("You do not need additional employees to finish this task.")
    else:
        number_of_employees_needed = (total_work_hours_needed - total_available_hours) / (
            individual_work_hours * individual_work_days)
        number_of_employees_needed = int(number_of_employees_needed) + 1  # Round up

        print(f"You need {number_of_employees_needed} additional employees to finish this task.")

# Call the function
hourbased()
